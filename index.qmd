---
title: "Chocolate Chip Cookies"
execute:
  error: true
author: "Teresa Trinh"
output: html_document
---

## Reading In the Data

First, read in the CSV data of cookie ingredients.
Make sure that your end-result data has appropriate types for each column - these should match the types provided in the documentation in the README.md file.

```{r}

library(ggplot2)

cookie <- read.csv('choc_chip_cookie_ingredients.csv')

```

```{python}
import pandas as pd

cookie = pd.read_csv("choc_chip_cookie_ingredients.csv")

```


## Exploratory Data Analysis

Exploratory data analysis is the process of getting familiar with your dataset. To get started, [this blog post](https://www.mrdbourke.com/a-gentle-introduction-to-exploratory-data-analysis/) provides a nice checklist to get you thinking:

> 1.  What question(s) are you trying to solve (or prove wrong)?
> 2.  What kind of data do you have and how do you treat different types?
> 3.  What's missing from the data and how do you deal with it?
> 4.  Where are the outliers and why should you care about them?
> 5.  How can you add, change or remove features to get more out of your data?

### Generating Questions

Generate at least 5 questions you might explore using this database of cookie ingredients.

1. What is the average number of ingredients in a recipe?
2. Which type of brown sugar is more commonly used? 
3. What is the average amount of chocolate chips used?
4. Is baking powder or baking soda more commonly used?
5. What are the least common ingredients?


### Skimming the Data

One thing we often want to do during EDA is to examine the quality of the data - are there missing values? What quirks might exist in the dataset?

The `skimr` package in R, and the similar `skimpy` package in python (which has a much better name, in my opinion), can help provide visual summaries of the data. 

Install both packages, and read the package documentation ([R](https://cran.r-project.org/web/packages/skimr/vignettes/skimr.html), [Python](https://pypi.org/project/skimpy/)).

[Part 1] Use each package and generate summaries of your data that require the use of at least some non-default options in each package's `skim` function.


```{r}
# install.packages("skimr")

library(skimr)

skim(cookie)

skim(cookie) %>%
  dplyr::select(skim_type, skim_variable, numeric.hist, numeric.mean)

```

```{python}

# %pip install skimpy

import skimpy

skimpy.skim(cookie)

```

[Part 2] Write 1-2 sentences about what you can tell from each summary display you generate. Did you discover anything new about the data?

With the histogram of the numeric data generated in R, ratings are skewed left (lots of highly rated recipes) and quantities of ingredients are skewed right (lots of low quantity of ingredients in recipes). From the summary data of string, there are 209 unique recipes (amount of unique strings). 

By creating a summary, we are better able to see the bigger picture of the data rather each piece of data separately. 


### Generating Tables

Another useful technique for exploratory data analysis is to generate summary tables. 
You may want to use the `dplyr` package in R (`group_by` or `count` functions), as well as the `groupby` and `count` methods in Pandas. [Python example](https://sparkbyexamples.com/pandas/pandas-groupby-count-examples/), [R example](https://dplyr.tidyverse.org/reference/count.html)

[Part 1] Using R and Python, generate a table that shows what **proportion** of recipes contain each type of ingredient, for the most common 20 ingredients.

```{r}
library(dplyr)

top_ingredients <- cookie %>% count(Ingredient, Recipe_Index, sort = TRUE) %>% count(Ingredient, sort = TRUE) %>% mutate(proportion = round((n/209), digits = 2)) 

print(top_ingredients %>% head(20))

```

```{python}

top_ingredient = cookie.groupby(['Ingredient'])['Recipe_Index'].nunique().sort_values(ascending = False).reset_index(name = 'count')

top_ingredient['proportion'] = round(top_ingredient['count']/209, 2)

print(top_ingredient.head(20))

```

[Part 2] Print out a character string that lists all of the ingredients that do not appear in at least 20 recipes.

```{r}

less_than_20 <- top_ingredients %>% filter(n < 20) %>% pull(Ingredient)

less_than_20_string <- ""
for (x in less_than_20) {
  if (which(less_than_20 == x) != 1) {
    less_than_20_string <- paste(less_than_20_string, x, sep = ", ")
  } else {
    less_than_20_string <- paste(less_than_20_string, x)
  }
}

print(paste("Ingredients that are in less than 20 recipes:", less_than_20_string))

```

```{python}

less_than_20 = top_ingredient[top_ingredient['count'] < 20]['Ingredient']

less_than_20_string = ""

for x in less_than_20:
  less_than_20_string += x + ", "

print(f'Ingredients that are in less than 20 recipes: {less_than_20_string[:-2]}')

```

### Visualization

Using whatever plotting system you are comfortable with in R or python, see if you can create a couple of useful exploratory data visualizations which address one of the questions you wrote above - or another question which you've come up with as you've worked on this assignment.

[Part 1] Create at least one plot (it doesn't have to be pretty) that showcases an interesting facet of the data.

```{r}
library(ggplot2)
ingredient_count <- count(cookie, Recipe_Index)
ggplot(ingredient_count, aes(n)) + geom_histogram(bins = max(ingredient_count$n))

```

[Part 2] Write 2-3 sentences about what you can learn from that plot and what directions you might want to investigate from here.

I plotted the distribution of the number of ingredients in a recipe. It is pretty evenly distirbuted. However there is a recipe with 1 ingredient, so I would like to investigate this recipe to see if it an outlier. 